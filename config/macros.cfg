# ----------------------------------------------------------------------
#                MagnetoX Settings
# ----------------------------------------------------------------------

[gcode_macro _MAGNETOX_SETTINGS]
variable_probing_bed_temp            : 70.0 ; default temperature for the bed when probing for QGL or bed meshing
variable_probing_max_extruder_temp   : 165.0
variable_nozzle_clean_method         : None
variable_nozzle_clean_temp           : 220
gcode:

# ----------------------------------------------------------------------
#                Customize Mainsail PAUSE / RESUME Macros
# ----------------------------------------------------------------------

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True                 ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 155                  ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 5                    ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 10.0                 ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0                  ; the value to retract while PAUSE
variable_cancel_retract   : 5.0                  ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0                 ; retract speed in mm/s
variable_unretract        : 1.0                  ; the value to unretract while RESUME
variable_speed_unretract  : 35.0                 ; unretract speed in mm/s
variable_speed_hop        : 15.0                 ; z move speed in mm/s
variable_speed_move       : 100.0                ; move speed in mm/s
variable_park_at_cancel   : False                ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None                 ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None                 ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_use_fw_retract   : False                ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0                    ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""                   ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
variable_user_pause_macro : "_PAUSE_EXTENSION"   ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "_RESUME_EXTENSION"  ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""                   ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

# ----------------------------------------------------------------------
#                         Calibration Helpers
# ----------------------------------------------------------------------

[gcode_macro PREPARE_QGL]
description: QGL preparation step 1: Set initial temperatures and prepare for nozzle cleaning
variable_bed_temp: 0.0
variable_probe_temp: 0.0
variable_clean_temp: 0.0
gcode:
  # Parameters to call the macro with
  {% set BED_TEMP = params.BED_TEMP|default(printer['gcode_macro _MAGNETOX_SETTINGS'].probing_bed_temp)|float %}
  {% set PROBE_TEMP = params.PROBE_TEMP|default(printer['gcode_macro _MAGNETOX_SETTINGS'].probing_max_extruder_temp)|float %}
  {% set CLEAN_TEMP = params.CLEAN_TEMP|default(printer['gcode_macro _MAGNETOX_SETTINGS'].nozzle_clean_temp)|float %}
  {% set NOZZLE_CLEAN = params.NOZZLE_CLEAN|default(printer['gcode_macro _MAGNETOX_SETTINGS'].nozzle_clean_method) %}

  # Define variables to access from outside the macro
  SET_GCODE_VARIABLE MACRO=PREPARE_QGL VARIABLE=bed_temp VALUE={BED_TEMP}
  SET_GCODE_VARIABLE MACRO=PREPARE_QGL VARIABLE=probe_temp VALUE={PROBE_TEMP}
  SET_GCODE_VARIABLE MACRO=PREPARE_QGL VARIABLE=clean_temp VALUE={CLEAN_TEMP}

  # Ensure motors are enabled, clear previous state, and set bed temperature
  LM_ENABLE
  G4 P4000
  CLEAR_PAUSE
  BED_MESH_CLEAR
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Setting bed temperature to %3.1f\u00B0C" % (BED_TEMP)}'

  # Handle nozzle cleaning
  {% if NOZZLE_CLEAN.lower() == "none" %}
    # If printer is already homed, make sure to always probe with the same (max) temperature, else, home first
    {% if "xyz" in printer.toolhead.homed_axes %}
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Setting extruder temperature to %3.1f\u00B0C for probing. Waiting for temperature to stabilize" % (PROBE_TEMP)}'
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={PROBE_TEMP - 1.5} MAXIMUM={PROBE_TEMP + 1.5}
      _PREPARE_QGL_STEP3
    {% else %}
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Printer not homed. Homing now."}'
      G28
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Setting extruder temperature to %3.1f\u00B0C for probing. Waiting for temperature to stabilize" % (PROBE_TEMP)}'
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={PROBE_TEMP - 1.5} MAXIMUM={PROBE_TEMP + 1.5}
      _PREPARE_QGL_STEP3
    {% endif %}

  {% elif NOZZLE_CLEAN.lower() == "manual" %}
    # Move to clean position and set temperature for manual cleaning
    {% if "xyz" in printer.toolhead.homed_axes %}
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Setting extruder temperature to %3.1f\u00B0C for cleaning. Waiting for temperature to stabilize" % (CLEAN_TEMP)}'
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={CLEAN_TEMP}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={CLEAN_TEMP - 1.5} MAXIMUM={CLEAN_TEMP + 1.5}
      _PREPARE_QGL_STEP2
      _PROMPT_MANUAL_NOZZLE_CLEAN
    {% else %}
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Printer not homed. Homing now."}'
      G28
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Setting extruder temperature to %3.1f\u00B0C for cleaning. Waiting for temperature to stabilize" % (CLEAN_TEMP)}'
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={CLEAN_TEMP}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={CLEAN_TEMP - 1.5} MAXIMUM={CLEAN_TEMP + 1.5}
      _PREPARE_QGL_STEP2
    {% endif %}
  {% endif %}

  # Dummy argument block for the web-interfaces
  {% set dummy = None if True else "
  {% set dummy = params.BED_TEMP|default(70.0) %}
  {% set dummy = params.PROBE_TEMP|default(165.0) %}
  {% set dummy = params.CLEAN_TEMP|default(220.0) %}
  {% set dummy = params.NOZZLE_CLEAN|default(None) %}
  " %} # End argument block for the web-interfaces

[gcode_macro _PREPARE_QGL_STEP2]
description: QGL preparation step 2: Wait for temperatures and cleaning then start actual QGL
gcode:
      # Get the variables' values from the PREPARE_QGL macro
      {% set CLEAN_TEMP = printer['gcode_macro PREPARE_QGL'].clean_temp|float %}

      G90
      G92 E0
      G1 E-2 F3600
      RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Extruder reached %3.1f\u00B0C for cleaning. Clean nozzle now and confirm prompt" % (CLEAN_TEMP)}'
      G92 E0
      G1 X150 Y200 Z50 F6000
      _PROMPT_MANUAL_NOZZLE_CLEAN

[gcode_macro _PROMPT_MANUAL_NOZZLE_CLEAN]
description: Prompt to continue QGL after cleaning the nozzle
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Manual Nozzle Clean"
  RESPOND TYPE=command MSG="action:prompt_text Press Continue when nozzle is cleaned to start QGL."
  RESPOND TYPE=command MSG="action:prompt_button Continue|_PREPARE_QGL_STEP3|primary"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancle|RESPOND type=command msg=action:prompt_end"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _PREPARE_QGL_STEP3]
description: QGL preparation step 3: Wait for temperatures and cleaning then start actual QGL
gcode:
  RESPOND TYPE=command MSG='action:prompt_end'

  # Get the variables' values from the PREPARE_QGL macro
  {% set BED_TEMP = printer['gcode_macro PREPARE_QGL'].bed_temp|float %}
  {% set PROBE_TEMP = printer['gcode_macro PREPARE_QGL'].probe_temp|float %}

  # Wait for bed and extruder temperatures to stabilize, with fan if cooling needed
  RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Making sure that all temperatures are within the definded ranges"}'
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={PROBE_TEMP - 1.5} MAXIMUM={PROBE_TEMP + 1.5}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP - 1.5} MAXIMUM={BED_TEMP + 1.5}

  # Perform QGL and re-home Z
  RESPOND TYPE=echo PREFIX='PREPARE_QGL' MSG='{"Starting Quad Qantry Leveling and Home afterwards"}'
  QUAD_GANTRY_LEVEL
  G28 Z

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
  {% if "z" not in printer.toolhead.homed_axes %}
    G28 Z
  {% endif %}
  M118 Heating the bed, please wait...
  M190 S50
  M118 Complete heating and start executing bed mesh calibrate
  BED_MESH_CALIBRATE_BASE
  G28 Z

[gcode_macro CALIBRATE_BED]
description: Level bed and create or update the "default" mesh
gcode:
  LM_ENABLE
  M190 S50
  M109 S150
  QUAD_GANTRY_LEVEL_BASE
  BED_MESH_CALIBRATE_BASE


[gcode_macro TUNE_BED_PID]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro TUNE_EXTRUDER_PID]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=230

# ----------------------------------------------------------------------
#                         Print start and end Functions
# ----------------------------------------------------------------------

[gcode_macro LOAD_BED_MESH]
description: Load a bed mesh by name, or use "default" if it doesn't exist, or perform adaptive meshing if "adaptive" is specified
gcode:
  {% set mesh_name = params.MESH|default("default") %}

  # Check if adaptive meshing is requested
  {% if mesh_name == "adaptive" %}
    { action_respond_info("Performing adaptive bed meshing.") }
    # Example command to start adaptive meshing (replace with your actual mesh command)
    # TBD
  {% else %}
    # Check if the specified mesh exists / only use the integer part of the temperature
    {% set name_tmp = mesh_name|string %}
    {% set name_tmp = name_tmp.split('.') %}
    {% if printer["configfile"].config["bed_mesh " ~ name_tmp[0]] is not defined %}
      { action_respond_info("Mesh '" ~ name_tmp[0] ~ "' not found. Loading 'default' mesh instead.") }
      BED_MESH_PROFILE LOAD=default
    {% else %}
      { action_respond_info("Loading mesh '" ~ name_tmp[0] ~ "'.") }
      BED_MESH_PROFILE LOAD={name_tmp[0]}
    {% endif %}
  {% endif %}


[gcode_macro PRINT_START]
gcode:
  # Parameters to call the macro with
  {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(165)|float %}
  {% set MESH = params.MESH|default("default") %}
  {% set Z_OFFSET = params.Z_OFFSET|default(0)|float %}
  # {% set NOZZLE_CLEAN = params.NOZZLE_CLEAN|default("none") %}

  # Start clean
  LM_ENABLE
  G4 P4000
  CLEAR_PAUSE
  BED_MESH_CLEAR

  # Heat and wait for bed
  M190 S{BED_TEMP}

  # Home with bed at temperature
  G28

  # Heat and wait for extruder
  M109 S{EXTRUDER_TEMP}
  # Load mesh matching the bed temperature.
  LOAD_BED_MESH MESH={MESH}

  # Make sure to use absolute positioning
  G90

  # Apply Z-Offset
  SET_GCODE_OFFSET Z_ADJUST={Z_OFFSET} MOVE=1

  # Purge / prime nozzle and reset extruder
  LINE_PURGE
  G92 E0

[gcode_macro PRINT_END]
gcode:
  G91
  G1 Z5
  G1 E-5 F300
  G90
  G1 X200 Y10  F12000
  M104 S0
  M140 S0
  M106 S0
  UPDATE_DELAYED_GCODE ID=delay_disable_motor DURATION=600

# ----------------------------------------------------------------------
#                Pause / Resume Extensions for MagnetoX
# ----------------------------------------------------------------------

[gcode_macro _PAUSE_EXTENSION]
gcode:
    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=_RESUME_EXTENSION VARIABLE=last_fan_speed VALUE={printer["fan"].speed}
        SET_GCODE_VARIABLE MACRO=_RESUME_EXTENSION VARIABLE=last_jetstream_speed VALUE={printer["fan_generic Jetstream"].speed}
        M107
        UPDATE_DELAYED_GCODE ID=cool_hot_end DURATION=240
    {% endif %}

[gcode_macro _RESUME_EXTENSION]
variable_last_fan_speed: 0
variable_last_jetstream_speed: 0
gcode:
    {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
    {% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}

    M109 S{last_extruder_temp}
    M106 S{last_fan_speed*255|int}
    SET_FAN_SPEED FAN=Jetstream SPEED={last_jetstream_speed}
    _CLIENT_EXTRUDE
    RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[delayed_gcode cool_hot_end]
gcode:
    {% if printer['pause_resume'].is_paused|int == 1 %}
      M104 S0
    {% endif %}

# ----------------------------------------------------------------------
#                         Filament Load / Unload
# ----------------------------------------------------------------------

# button click unload filament
[gcode_macro _C_UNLOAD_FILAMENT]
gcode:
    {% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
      {% set speed = params.SPEED|default(300) %}
      {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
      G92 E0
      G1 E-20 F1200 # fast-unload
    {% else %}
      M118 Extruder temperature too low, please heat the nozzle first
    {% endif %}

# touch screen unload filament
[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if printer.idle_timeout.state != 'Printing' %}
      M118 Unloading filament
      M118 Heating nozzle...
      M109 S250
      G91
      M118 Unloading...
      G0 E40 F360
      G0 E40 F360
      G0 E5 F1200
      M118 Cooling nozzle to 165 ...
      M106
      M109 S165
      M107
      G0 E-45 F1200
      G0 E-45 F1200
      G0 E-45 F1200
      G0 E-45 F1200
      G90
      G92 E0
      M104 S0
      M118 Unload finish
  {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% if printer[printer.toolhead.extruder].temperature > printer.configfile.settings['extruder'].min_extrude_temp %}
      {% set speed = params.SPEED|default(300) %}
      {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
      G91
      G92 E0
      G1 E25 F{speed} # purge
    {% else %}
      M118 Extruder temperature too low,please heat the nozzle first
    {% endif %}

# ----------------------------------------------------------------------
#                         Filament Run-Out
# ----------------------------------------------------------------------

[delayed_gcode delay_filament_runout_pause]
gcode:
  _DOUBLE_CHECK_PAUSE

[gcode_macro _DOUBLE_CHECK_PAUSE]
gcode:
  {% if printer["gcode_macro _SET_RUNOUT_STATE"].runout_state|int == 0 %}
    M118 Filament Runout Triggerd！
    PAUSE
  {% endif %}

[gcode_macro _SET_RUNOUT_STATE]
variable_runout_state: 0
gcode:
    {% if params.STATE is defined %}
      {% if params.STATE|int == 0 %}
        SET_GCODE_VARIABLE MACRO=_SET_RUNOUT_STATE VARIABLE=runout_state VALUE=0
      {% else %}
        SET_GCODE_VARIABLE MACRO=_SET_RUNOUT_STATE VARIABLE=runout_state VALUE=1
      {% endif %}
    {% else %}
      SET_GCODE_VARIABLE MACRO=_SET_RUNOUT_STATE VARIABLE=runout_state VALUE=0
    {% endif %}

[gcode_macro _DOUBLE_CHECK_RUNOUT]
gcode:
  UPDATE_DELAYED_GCODE ID=delay_filament_runout_pause DURATION=3

# ----------------------------------------------------------------------
#                         Miscellaneous Functions
# ----------------------------------------------------------------------

[gcode_macro TOGGLE_LIGHTS]
gcode:
  {% if printer['output_pin _led_pin'].value == 1 %}
    SET_PIN PIN=_led_pin VALUE=0
  {% else %}
    SET_PIN PIN=_led_pin VALUE=1
  {% endif %}

[gcode_macro CLEAR_LOAD_CELL]
gcode:
  LC28

[gcode_macro M106]
description: Enhanced M106 to handle fan scaling for Jet fan with fan index P2
rename_existing: M106.1
gcode:
  {% set fan_speed_raw = params.S|default(0)|int %}
  {% set fan_index = params.P|default(0)|int %}

  {% if params.P is defined and fan_index == 2 %}
    # Scale the fan speed from 0-255 to 0-1 for the Jet fan
    {% set scaled_speed = (fan_speed_raw / 255.0) %}
    { action_respond_info("Setting Jet fan speed to " ~ (scaled_speed * 100) | round(1) ~ "%") }
    SET_FAN_SPEED FAN=Jetstream SPEED={scaled_speed}
  {% else %}
    # Default fan handling if P2 is not specified
    M106.1 S{fan_speed_raw}
  {% endif %}


[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% if params.P is defined %}
      {% if params.P|int == 2 %}
        SET_FAN_SPEED FAN=Jetstream SPEED=0
      {% endif %}
    {% else %}
      SET_FAN_SPEED FAN=Jetstream SPEED=0
      M106.1 S0
    {% endif %}

# ----------------------------------------------------------------------
#                         OS and OS Update Functions
# ----------------------------------------------------------------------

[gcode_shell_command RM_UPDATE]
command: rm -rf /home/pi/magnetox-os-update
timeout: 2.
verbose: True

[gcode_shell_command GIT_CLONE_DEV]
command: git clone -b dev https://github.com/mypeopoly/magnetox-os-update /home/pi/magnetox-os-update
timeout: 150.
verbose: True

[gcode_shell_command GIT_CLONE]
command: git clone -b main https://github.com/mypeopoly/magnetox-os-update /home/pi/magnetox-os-update
timeout: 150.
verbose: True

[gcode_shell_command CHMOD_E]
command: chmod +x /home/pi/magnetox-os-update/update.sh
timeout: 3.
verbose: True

[gcode_shell_command  UPDATE_OS_CMD]
command: sh /home/pi/magnetox-os-update/update.sh
timeout: 600.
verbose: True

[gcode_shell_command  GET_MIRROR_VERSION]
command: curl -G http://127.0.0.1:8880/get_os_version
timeout: 2.
verbose: True

[gcode_shell_command  RESIZE_FILE_SYSTEM]
command: curl -G http://127.0.0.1:8880/auto_resize_filesystem
timeout: 2.
verbose: False

[gcode_macro MAGNETO_OS_VERSION]
gcode:
  RUN_SHELL_COMMAND CMD=GET_MIRROR_VERSION

[gcode_macro _UPDATE_OS]
gcode:
  RUN_SHELL_COMMAND CMD=RM_UPDATE
  RUN_SHELL_COMMAND CMD=GIT_CLONE
  RUN_SHELL_COMMAND CMD=CHMOD_E
  RUN_SHELL_COMMAND CMD=UPDATE_OS_CMD

[gcode_macro _UPDATE_OS_DEV]
gcode:
  RUN_SHELL_COMMAND CMD=RM_UPDATE
  RUN_SHELL_COMMAND CMD=GIT_CLONE_DEV
  RUN_SHELL_COMMAND CMD=CHMOD_E
  RUN_SHELL_COMMAND CMD=UPDATE_OS_CMD

[gcode_macro RESIZE_FILESYSTEM]
gcode:
  RUN_SHELL_COMMAND CMD=RESIZE_FILE_SYSTEM

# ----------------------------------------------------------------------
#                         Linear Motor Management
# ----------------------------------------------------------------------

[gcode_shell_command  MOTOR_CONTROL]
command: curl -G http://127.0.0.1:8880/motor_control
timeout: 2.
verbose: True

[gcode_macro LINEAR_MOTOR_CONTROL]
gcode:
  RUN_SHELL_COMMAND CMD=MOTOR_CONTROL

[gcode_shell_command  LINER_MOTOR_ENABLE]
command: curl -G http://127.0.0.1:8880/send_command?command=ENABLE
timeout: 2.
verbose: False


[gcode_shell_command  LINER_MOTOR_DISABLE]
command: curl -G http://127.0.0.1:8880/send_command?command=DISABLE
timeout: 2.
verbose: False

[gcode_macro LINER_MOTOR]
gcode:
  {% if params.ENABLE is defined %}
    {% if params.ENABLE|int == 0 %}
      RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE
    {% else %}
      RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
    {% endif %}
  {% else %}
    RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE
  {% endif %}

[gcode_macro LM_ENABLE]
gcode:
  G4 P500
  RUN_SHELL_COMMAND CMD=LINER_MOTOR_ENABLE

[gcode_macro LM_DISABLE]
gcode:
  RUN_SHELL_COMMAND CMD=LINER_MOTOR_DISABLE

[delayed_gcode delay_disable_motor]
gcode:
    LM_DISABLE
    M84 ; Make sure that Klipper's homing state is reset

# ----------------------------------------------------------------------
#                         Debug and Test Functions
# ----------------------------------------------------------------------

[gcode_macro SET_XYZ_POSITION]
gcode:
  SET_KINEMATIC_POSITION X=100 Y=100 Z=100

[gcode_macro Z_TO_BOTTOM]
gcode:
  G28
  G1 Z295

[gcode_macro TEST_X_MOVE]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(400)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(10)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(10000)|int %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    G28
    G1 Z20 F300
    {% for i in range(iterations) %}
        G0 X50 Y150 F{speed*60}
        G0 X290 Y150 F{speed*60}
    {% endfor %}

[gcode_macro TEST_X_MOVE_START]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(400)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(10)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(10000)|int %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    G28
    G1 Z20 F300
    {% for i in range(iterations) %}
        G0 X10 Y150 F{speed*60}
        G0 X180 Y150 F{speed*60}
    {% endfor %}


[gcode_macro TEST_X_MOVE_END]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    G28
    G1 Z20 F300
    {% for i in range(iterations) %}
        G0 X160 Y150 F{speed*60}
        G0 X280 Y150 F{speed*60}
    {% endfor %}

[gcode_macro TEST_Y_MOVE]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    G28
    G1 Z20 F300
    {% for i in range(iterations) %}
        G0 X100 Y50 F{speed*60}
        G0 X100 Y350 F{speed*60}
    {% endfor %}

[gcode_macro TEST_XY_MOVE]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(400)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    G28
    G1 Z20 F300
    {% for i in range(iterations) %}
        G0 X10 Y10 F{speed*60}
        G0 X250 Y350 F{speed*60}
    {% endfor %}

[gcode_macro TEST_Z_MOVE]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(20)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(3)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    G28
    {% for i in range(iterations) %}
        G0 Z10 F{speed*60}
        G0 Z266 F{speed*60}
    {% endfor %}
